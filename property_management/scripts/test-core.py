#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö core –º–æ–¥—É–ª–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from shared.core.config import PropertyServiceConfig, get_config
from shared.core.logging import configure_logging, get_logger
from shared.auth.security import security_manager
from shared.utils.validators import (
    validate_email_address, validate_phone_number, 
    validate_postal_code, validate_inn
)
from shared.utils.exceptions import PropertyManagementException, ValidationException


async def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß Testing Configuration...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = PropertyServiceConfig()
        print(f"‚úÖ Service name: {config.SERVICE_NAME}")
        print(f"‚úÖ Environment: {config.ENVIRONMENT.value}")
        print(f"‚úÖ Log level: {config.LOG_LEVEL.value}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        tenant_config = get_config("tenant-service")
        print(f"‚úÖ Tenant service config loaded: {tenant_config.SERVICE_NAME}")
        
        print("‚úÖ Configuration test passed\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}\n")
        return False


async def test_logging():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üìù Testing Logging...")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        config = PropertyServiceConfig()
        configure_logging(config)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
        logger = get_logger("test_logger")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.debug("Debug message", test_field="debug_value")
        logger.info("Info message", test_field="info_value")
        logger.warning("Warning message", test_field="warning_value")
        logger.error("Error message", test_field="error_value")
        
        print("‚úÖ Logging test passed\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Logging test failed: {e}\n")
        return False


async def test_authentication():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîê Testing Authentication...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        password = "test_password_123"
        hashed = security_manager.hash_password(password)
        print(f"‚úÖ Password hashed: {hashed[:20]}...")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
        is_valid = security_manager.verify_password(password, hashed)
        assert is_valid, "Password verification failed"
        print("‚úÖ Password verification passed")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        user_data = {
            "sub": "test-user-id",
            "email": "test@example.com",
            "role": "user"
        }
        
        tokens = security_manager.create_tokens(user_data)
        assert "access_token" in tokens
        assert "refresh_token" in tokens
        print("‚úÖ Token creation passed")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ access —Ç–æ–∫–µ–Ω–∞
        payload = security_manager.verify_access_token(tokens["access_token"])
        assert payload["sub"] == user_data["sub"]
        print("‚úÖ Access token verification passed")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        new_access_token = security_manager.refresh_access_token(tokens["refresh_token"])
        assert new_access_token is not None
        print("‚úÖ Token refresh passed")
        
        print("‚úÖ Authentication test passed\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Authentication test failed: {e}\n")
        return False


async def test_validators():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤"""
    print("‚úÖ Testing Validators...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        valid_email = validate_email_address("test@example.com")
        assert valid_email == "test@example.com"
        print("‚úÖ Email validation passed")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        valid_phone = validate_phone_number("8-999-123-45-67")
        assert valid_phone == "+79991234567"
        print("‚úÖ Phone validation passed")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        valid_postal = validate_postal_code("123456")
        assert valid_postal == "123456"
        print("‚úÖ Postal code validation passed")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ù–ù (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π –ò–ù–ù)
        try:
            validate_inn("7707083893")  # –¢–µ—Å—Ç–æ–≤—ã–π –ò–ù–ù
            print("‚úÖ INN validation passed")
        except ValueError:
            print("‚ö†Ô∏è  INN validation skipped (test INN may be invalid)")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            validate_email_address("invalid-email")
            assert False, "Should have raised ValueError"
        except ValueError:
            print("‚úÖ Invalid email correctly rejected")
        
        try:
            validate_phone_number("invalid-phone")
            assert False, "Should have raised ValueError"
        except ValueError:
            print("‚úÖ Invalid phone correctly rejected")
        
        print("‚úÖ Validators test passed\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Validators test failed: {e}\n")
        return False


async def test_exceptions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    print("‚ö†Ô∏è  Testing Exceptions...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        try:
            raise PropertyManagementException("Test exception", {"test": "data"})
        except PropertyManagementException as e:
            assert e.message == "Test exception"
            assert e.details["test"] == "data"
            print("‚úÖ Base exception handling passed")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        try:
            raise ValidationException("Validation failed", {"field": "email"})
        except ValidationException as e:
            assert e.message == "Validation failed"
            print("‚úÖ Validation exception handling passed")
        
        print("‚úÖ Exceptions test passed\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Exceptions test failed: {e}\n")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ Starting Core Modules Test Suite\n")
    
    tests = [
        test_configuration,
        test_logging,
        test_authentication,
        test_validators,
        test_exceptions
    ]
    
    results = []
    
    for test in tests:
        result = await test()
        results.append(result)
    
    # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
    passed = sum(results)
    total = len(results)
    
    print("üìä Test Results:")
    print(f"   Passed: {passed}/{total}")
    print(f"   Failed: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ All tests passed! Core modules are working correctly.")
        return 0
    else:
        print(f"\n‚ùå {total - passed} test(s) failed. Please check the output above.")
        return 1


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    os.environ.setdefault("DATABASE_URL", "postgresql://admin:password@localhost:5432/property_management")
    os.environ.setdefault("SECRET_KEY", "test-secret-key-for-development-only-32-chars-long")
    os.environ.setdefault("ENVIRONMENT", "testing")
    
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
